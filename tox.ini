# Notes:
#  - isort
#    I didn't get isort to recognize 'stressor' as known_first_party, when
#    running in tox. So it behaves differently as when running on the command
#    prompt or fro VSCode
#  - We use py37 as basepython, until Python 3.8 can be installed on macOS
#    using homebrew

[tox]
basepython = python3.7
envlist =
    lint,
    black-check,
    py38,
    py37,
    py36,
    py35,
    coverage,
skip_missing_interpreters = true

# Alternsative to pytest.ini:
[pytest]
# Silence `PytestDeprecationWarning`
junit_family = legacy
; testpaths =
;     test
;     src

# TOX Test Environment
[testenv]
usedevelop = True
extras =
    test
passenv = LC_ALL LANG TRAVIS TRAVIS_BRANCH TRAVIS_OS_NAME TRAVIS_BUILD_ID
setenv =
  COVERAGE_FILE=.coverage.{envname}
# Note: also honors .coveragerc:
commands =
    # Run everything from /test folder:
    python -V
    ; pip list
    pytest -ra -v -x --durations=10 --cov=stressor --cov-report=xml --html=_build/pytest/report-{envname}.html --self-contained-html {posargs}
deps =
    lxml
    python-dateutil
    PyYAML
    pytest
    pytest-cov
    pytest-html
    requests
    # For local test server:
    cheroot
    wsgidav


[testenv:lint]
skip_install = true
# basepython = python3.7
deps =
    flake8
    # helper to generate HTML reports:
    flake8-html
    # Useful flake8 plugins that are Python and Plone specific:
    flake8-coding
    flake8-debugger
    flake8-deprecated
    flake8-pytest
    flake8-quotes
    flake8-todo
    isort<5  # can be relaxed, once flake8-isort dependency is resolved (https://github.com/gforcada/flake8-isort/issues/88)
    flake8-isort
    #
    flake8-bugbear
    mccabe
    # Potential flake8 plugins that should be used:  # TBD
    #flake8-blind-except
    #flake8-commas
    #flake8-docstrings
    #flake8-mypy
    #flake8-pep3101
    #flake8-plone-hasattr
    #flake8-string-format
    #flake8_strict
    #flake8-quotes
commands =

    # --Does not recognize known-first-party (see comment at the top)
#    isort --check-only --recursive {toxinidir}/stressor {toxinidir}/test setup.py
    # --htmldir needs mkdir to create the _build directory, but does not work on Windows:
#    mkdir -p {toxinidir}/_build/flake8
#    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --doctests stressor test setup.py
    flake8 stressor test setup.py --doctests
whitelist_externals =
    mkdir


[testenv:coverage]
skip_install = true
deps =
    coverage
setenv =
    COVERAGE_FILE=.coverage
commands =
    coverage erase
    coverage combine
    coverage html
    coverage xml
    coverage report --fail-under=75.0


[testenv:black]
description = Reformat python code using Black
# basepython = python3.7
changedir = {toxinidir}
skip_install = true
deps =
    black
commands =
    black stressor test setup.py


[testenv:black-check]
description = Check Black formatting compliance and add flake8-bugbear checks
# basepython = python3.7
changedir = {toxinidir}
skip_install = true
deps =
    black
commands =
    black --check --diff stressor test setup.py


[testenv:format]
description = Reformat python code using Black and isort
# basepython = python3.7
changedir = {toxinidir}
skip_install = true
deps =
    black
    # isort
commands =
    # isort --apply --recursive {toxinidir}/stressor {toxinidir}/test setup.py {posargs}
    black stressor test setup.py


[testenv:isort-apply]
skip_install = true
deps =
    # pipenv
    isort
commands =
    # pipenv install --dev --skip-lock
    pip list
    isort --apply --recursive {toxinidir}/stressor {toxinidir}/test setup.py {posargs}


[testenv:autopep8]
skip_install = true
deps =
    autopep8
    docformatter
commands =
    autopep8 --verbose --in-place --recursive --aggressive --aggressive {toxinidir}/stressor {toxinidir}/test setup.py
    docformatter --in-place --recursive {toxinidir}/stressor {toxinidir}/test setup.py


[testenv:docs]
description = Build Sphinx documentation (output directory: docs/sphinx-build)
# basepython = python3.7
changedir = docs
deps =
    python-dateutil
    lxml
    recommonmark
    sphinx
    sphinx_rtd_theme
commands =
    # http://www.sphinx-doc.org/en/master/man/sphinx-build.html
    sphinx-build -b html sphinx sphinx-build


[testenv:make_release_wheel_only]
deps =
    cheroot
    python-dateutil
    flake8
    lxml
    pytest
    twine
    wsgidav
commands =
    flake8
    pytest
    python3 -m setup sdist bdist_wheel --universal
    ;twine upload dist/*
    ; twine upload --repository-url https://test.pypi.org/legacy/ dist/*
    ; python3 setup.py bdist_msi

[testenv:make_release_msi]
basepython = python3.8
deps =
    cheroot
    cx_Freeze
    python-dateutil
    flake8
    lxml
    pytest
    twine
    wsgidav
commands =
    flake8
    pytest
    python -m setup sdist bdist_wheel --universal
    # Don't automatically 'twine upload', so we can test the MSI installer before
    ;twine upload dist/*
    ; pip list
    python setup.py bdist_msi


# [testenv:clean]
# commands =
#     coverage erase


# [testenv:stats]
# commands =
#     coverage combine
#     coverage report
#     coverage html
