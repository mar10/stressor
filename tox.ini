[tox]
basepython = python3.9
envlist =
    flake8,
    check,
    py39,
    py38,
    py37,
    py36,
    py35,
    coverage,
skip_missing_interpreters = true

# TOX Test Environment
[testenv]
usedevelop = True
extras =
    test
passenv = LC_ALL LANG TRAVIS TRAVIS_BRANCH TRAVIS_OS_NAME TRAVIS_BUILD_ID
setenv =
    COVERAGE_FILE=.coverage.{envname}
# Note: also honors .coveragerc:
commands =
    # Run everything from /tests folder:
    python -V
    ; pip list
    pytest -ra -v -x --durations=10 --cov=stressor --cov-report=xml --html=_build/pytest/report-{envname}.html --self-contained-html {posargs}
deps =
    # python-dateutil
    # PyYAML
    pytest
    pytest-cov
    pytest-html
    requests
    # For local test server:
    # TODO: relax cheroot specifier when WsgiDAV 3.0.4 becomes available
    cheroot < 8.5
    lxml
    wsgidav
    # We want to test the PluginManager
    psutil
    stressor-ps

[testenv:flake8]
skip_install = true
deps =
    # Required by flake8-bandit
    bandit
    # Flake8
    # Configuration is defined in the [flake8] section of setup.cfg.
    # Run `flake8 --help` to see the available options of *installed* plugins.
    flake8

    # --- Helper to generate HTML reports:
    # flake8-html

    # --- Useful flake8 plugins:
    flake8-annotations-complexity  # TAE002 too complex annotation (X > Y)
    # flake8-bandit  # Security checks, e.g. S101
    flake8-breakpoint  # Check forgotten breakpoints and debugger calls
    flake8-bugbear  # (B...) Check for error-prone constructs
    ; flake8-builtins  # Check for python builtins being used as variables or parameters (A...)
    flake8-coding  # C101 Coding magic comment not found, ...
    # flake8-commas  # C812 missing trailing comma -> Handled by Black
    ; flake8-comprehensions
    # flake8-docstrings
    # flake8-eradicate  # E800 Found commented out code
    flake8-expression-complexity  # ECE001 Expression is too complex (X > Y)
    # flake8-if-expr  # KEK100 don`t use "[on_true] if [expression] else [on_false]" syntax
    # flake8-import-order  # (we run `isort --check`)
    # flake8-isort  # (we run `isort --check`)
    # flake8-logging-format  # G001 Logging statement uses string.format()
    flake8-pep3101  # Use "".format instead of %
    # flake8-print  # T001 print found
    # flake8-pytest-style  # PT009 use a regular assert instead of unittest-style 'assertTrue'
    flake8-quotes  # See also [flake8] config
    # flake8-return  # R503 you should add explicit return at end of the function if function have return value except None
    # flake8-rst-docstrings  # Docstrings should work with Sphinx (RSTnnn)
    # flake8-string-format  # Check for valid string.format() args
    # flake8-todo  # T000 Todo note found
    # mccabe  # Check conplexity (see also max_complexity setting)
    ; pep8-naming
    # Flake8 plugin 'wemake'
    # (e.g. WPSnnn style errors)
    # wemake-python-styleguide
commands =
    flake8 stressor tests setup.py --doctests --statistics


[testenv:coverage]
skip_install = true
deps =
    coverage
setenv =
    COVERAGE_FILE=.coverage
commands =
    coverage erase
    coverage combine
    coverage html
    coverage xml
    coverage report --fail-under=75.0


[testenv:check]
description = Check Black formatting isort compliance
; skip_install = true
deps =
    black
    isort
changedir = {toxinidir}
commands =
    isort --check-only --profile black stressor tests setup.py
    black --check --diff stressor tests setup.py


[testenv:format]
description = Reformat python code using Black and isort
; skip_install = true
deps =
    black
    isort
changedir = {toxinidir}
commands =
    isort --profile black stressor tests setup.py {posargs}
    black stressor tests setup.py


; [testenv:autopep8]
; skip_install = true
; deps =
;     autopep8
;     docformatter
; commands =
;     autopep8 --verbose --in-place --recursive --aggressive --aggressive {toxinidir}/stressor {toxinidir}/tests setup.py
;     docformatter --in-place --recursive {toxinidir}/stressor {toxinidir}/tests setup.py


[testenv:docs]
description = Build Sphinx documentation (output directory: docs/sphinx-build)
# basepython = python3.7
changedir = docs
deps =
    python-dateutil
    lxml
    recommonmark
    sphinx
    sphinx_rtd_theme
commands =
    # http://www.sphinx-doc.org/en/master/man/sphinx-build.html
    sphinx-build -b html sphinx sphinx-build


# [testenv:make_release_wheel_only]
# deps =
#     cheroot
#     python-dateutil
#     flake8
#     lxml
#     pytest
#     twine
#     wsgidav
# commands =
#     flake8
#     pytest
#     python3 -m setup sdist bdist_wheel --universal
#     ;twine upload dist/*
#     ; twine upload --repository-url https://test.pypi.org/legacy/ dist/*
#     ; python3 setup.py bdist_msi

# [testenv:make_release_msi]
# basepython = python3.8
# deps =
#     cheroot
#     cx_Freeze
#     python-dateutil
#     flake8
#     lxml
#     pytest
#     twine
#     wsgidav
# commands =
#     flake8
#     pytest
#     python -m setup sdist bdist_wheel --universal
#     # Don't automatically 'twine upload', so we can test the MSI installer before
#     ;twine upload dist/*
#     ; pip list
#     python setup.py bdist_msi


# [testenv:clean]
# commands =
#     coverage erase


# [testenv:stats]
# commands =
#     coverage combine
#     coverage report
#     coverage html
