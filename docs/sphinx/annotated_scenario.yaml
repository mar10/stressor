# ----------------------------------------------------------------------------
# Stressor Scenario Definition
# See
#   - https://stressor.readthedocs.io/
#   - https://stressor.readthedocs.io/en/latest/ug_reference.html
# ----------------------------------------------------------------------------

# File identifier, must be 'stressor#0'
file_version: stressor#0

# ----------------------------------------------------------------------------
#: `config`: Global scenario settings.
config:
  #: Scenario name (defaults to name of this file without '.yaml' extension)
  name: Test WebDAV

  #: Optional multi-line string with additional info
  details: |
    This scenario runs some tests against a WebDAV server.
    We use it to test stressor against a locally running WsgiDAV server:
      - Open a terminal and run
      $ wsgidav --root tests/fixtures/ --port 8082 --auth anonymous
      - Open a second terminal and run
      $ stressor run tests/fixtures/test_mock_server

  # Optional string that describes the current run.
  # May be used to display additional info about boundary conditions, etc.
  # Example 'Test-Run STAGING nightly'
  # (pass `-o "tag:MY TAG INFO"` to override)
  tag:

  #: (int) Output verbosity level [0..5], default: 3
  verbose: 3
  #: (str)
  base_url: http://127.0.0.1:8082
  #: (float) Default timeout on seconds for web requests (i.e. HTTP activities)
  #: This value can be overridden with HTTP-Activity's `timeout` parameter
  request_timeout: 1.0
  #: (int) Max. total error count that is tolerated before stopping
  #: Override with `--max-errors` argument.
  #: Default: 0: don't stop on errors
  max_errors: 0
  #: (float) Max. run time in seconds before stopping (override with `--max-time`)
  #: Default: 0.0: no time limit
  max_time: 0.0

# ----------------------------------------------------------------------------
# `context`: Initial context value definitions.
# Context values can be accessed using `$(NAME)` macros, e.g. `$(base_url)`.
# The context is initialized with  all values from the `config` section,
# but we can add or override values here.
# Values may also be defined or overridden using the the command line, e.g.
# `--option "NAME:VALUE"`
context:

# ----------------------------------------------------------------------------
# `sessions`: The run configuration defines how the `sequences` are executed
# in parallel sessions.
sessions:
  #: (list) Defines a list of user dicts, with at least `name` and `pasword`
  #: attributes. Often stored in a separate file and included like so:
  users: $load(users.yaml)
  #: (int) Number of sessions (virtual users). If greater than no. of users,
  #: users will be re-used round robin.
  #: Default: 1
  count: 1
  #: (int) The main sequences (all sequences excluding 'init' and 'end') are
  #: repeated in a loop N times. After that, the 'end' sequence is run.
  #: Default: 0 (or 1) means no looping.
  repeat: 0
  #: (float) Minimal run time in seconds, before the session stops. The main
  #: sequences (all sequences excluding 'init' and 'end') are repeated in a loop
  #: until this time is reached. After that, the 'end' sequence is run.
  #: Default: 0.0 means no time looping.
  min_duration: 0.0
  #: (float) Maximal run time in seconds, before the session stops. The current
  #: and the 'end' sequences are completed.
  #: Default: 0.0 means no time limit.
  max_duration: 0.0
  #: (bool) Pass true to enable HTTP basic authentication, using user's credentials
  #: Default: false
  basic_auth: false
  #: (bool) Pass false to ignore SSL certificate errors. Default: true
  verify_ssl: true
  #: (float) Waiting time between starting distinct user sessions in seconds.
  #: Default: 0.0 means start all session at once.
  ramp_up_delay: 0.0

# ----------------------------------------------------------------------------
# `scenario`: Define the order and duration of sequences that every virtual
# user session performs.
# All sequence definitions that are referenced here, must also appear in the
# following `sequences` section.
scenario:
  # 'init' is the reserved name for the set-up sequence, like logging-in.
  # If errors occur here, all subsequent sequences (including 'end') are skipped.
  - sequence: init
  # Other sections can have arbitrary names and are excuted in order of appearance
  - sequence: main
    #: (float) This sequence is repeated in a loop, until `duration` seconds are
    #: reached (always completing the full sequence).
    #: Default: 0.0 means no time-based looping.
    duration: 0.0
    #: (int) This sequence is repeated in a loop, until `duration` seconds are
    #: reached (always completing the full sequence).
    #: Default: 0 (or 1) means no repeat.
    repeat: 0
  # 'end' is the reserved name for the tear-down sequence (e..g. log out).
  # If errors occurred in the mainhere, all subsequent sequences are skipped.
  - sequence: end

# ----------------------------------------------------------------------------
# `sequences`: List of named action sequences. Used as building blocks for
# scenarios
# Following some example activites. Please refer to the docs for details.
sequences:
  # 'init' is the reserved name for the set-up sequence.
  init:
    # Log-in
    - activity: HTTPRequest
      url: /
      method: OPTIONS
      assert_match_headers: ".*'DAV'.*"

    - activity: GetRequest
      # Use `base_url` by default:
      url: mock_login_response.json
      assert_json:
        result.user_guid: "{abc123}"
      store_json:
        user_guid: "result.user_guid"

    # - activity: $debug()

  # Other sections can have arbitrary names and are excuted in order of appearance
  main:
    - activity: GetRequest
      url: /
      assert_match: ".*Index of /.*"
      assert_html:
        "//*[@class='logo']": true

    # - activity: $debug()

    - activity: PutRequest
      url: /wsgidav_test_file~$(session_id).txt
      data: "Test"
      assert_max_time: 0.5
      # debug: true
      monitor: true

    - activity: RunScript
      script: |
        new_val = "New URL:" + base_url

    - activity: RunScript
      name: "Print context"
      script: |
        from pprint import pprint
        pprint(locals())

    - activity: $sleep(0.3)

    - activity: GetRequest
      url: /wsgidav_test_file~$(session_id).txt
      assert_match: "Test"

    - activity: $sleep(0.3)

    # - activity: $debug()

    # - activity: RunScript
    #   path: script_1.py

    # - activity: RunScript
    #   script: |
    #     temp = Fabulist.quote("${verb}")
    #     PutRequest(url="hurz")

  # 'end' is the reserved name for the tear-down sequence
  end:
    - activity: $sleep(0.1)

    - activity: DeleteRequest
      url: /wsgidav_test_file~$(session_id).txt
